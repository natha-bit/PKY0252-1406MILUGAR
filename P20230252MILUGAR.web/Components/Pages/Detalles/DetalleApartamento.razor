@page "/detalle/{id:int}"
@using P20230252MILUGAR.web.Data.Dtos
@using Microsoft.AspNetCore.Identity
@using P20230252MILUGAR.web.Data.Services
@using P20230252MILUGAR.web.Data

@inject IReservaServices ReservaService
@inject NavigationManager Navigation
@inject ApplicationDbContext DbContext
@inject AuthenticationStateProvider AuthProvider
@inject UserManager<ApplicationUser> UserManager
@inject IApartamentoServices ApartamentoService
@rendermode InteractiveServer



@if (apartamento != null)
{
    <div>
        @if (apartamento != null && !apartamento.Disponibilidad)
        {
            <div class="alert alert-warning mt-2">
                Este apartamento está <strong>ocupado</strong> y no se puede reservar en este momento.
            </div>
        }
        @if (imagenes.Any())
        {
            <div id="carouselExample" class="carousel slide" data-bs-ride="carousel">
                <div class="carousel-inner">
                    @for (int i = 0; i < imagenes.Count; i++)
                    {
                        <div class="carousel-item @(i == 0 ? "active" : "")">
                            <img src="@imagenes[i]" class="d-block w-100" style="max-height: 400px; object-fit: cover;" />
                        </div>
                    }
                </div>
                <button class="carousel-control-prev" type="button" data-bs-target="#carouselExample" data-bs-slide="prev">
                    <span class="carousel-control-prev-icon"></span>
                </button>
                <button class="carousel-control-next" type="button" data-bs-target="#carouselExample" data-bs-slide="next">
                    <span class="carousel-control-next-icon"></span>
                </button>
            </div>
        }

        <div class="apartamento-card">
            <br />
            <div class="Carddd">
                <h2 class="mt-3">@apartamento.Titulo</h2>
                <h4 style="color: green;">RD$@apartamento.PrecioMesual /mes</h4>
                <p><strong>Publicado por:</strong> @apartamento.PropietarioNombre</p>

                <h5>Descripción</h5>
                <p>@apartamento.Descripcion</p>

                <h5 class="fw-bold mt-4">Ubicación</h5>
                <p><i class="bi bi-geo-alt-fill me-2"></i>@apartamento.Ciudad, @apartamento.Direccion</p>

                <h5>Características</h5>
                <ul class="list-unstyled">
                    <li><i class="bi bi-house-door-fill"></i>  @apartamento.NumeroHabitaciones Habitaciones</li>
                    <li><i class="bi bi-droplet-half me-2"></i>@apartamento.NumeroBanios baños</li>
                    <li><i class="bi bi-aspect-ratio me-2"></i>@apartamento.Area Metros m²</li>
                    <li><i class="bi bi-check2-circle me-2"></i>@apartamento.ServiciosAdicionales</li>
                </ul>
            </div>
            <button class="btnRese testeo"
                    @onclick="CrearReservaAsync" type="button"
                    disabled="@(!apartamento?.Disponibilidad ?? true)">
                @(apartamento?.Disponibilidad == true ? "RESERVAR AHORA" : "NO DISPONIBLE")
            </button>
        </div>
    </div>
}



@code {
    [Parameter] public int id { get; set; }
    private ApartamentoDtos? apartamento;
    private string mensaje = "";
    private List<string> imagenes = new();


    private ApplicationUser? propietario;


    protected override async Task OnInitializedAsync()
    {
        apartamento = ApartamentoService.Consultar().FirstOrDefault(x => x.Id == id);

        if (apartamento != null && !string.IsNullOrWhiteSpace(apartamento.ImagenUrls))
        {
            imagenes = apartamento.ImagenUrls
                .Split(',', StringSplitOptions.RemoveEmptyEntries)
                .Select(url => url.Trim())
                .ToList();
        }

        if (apartamento != null && !string.IsNullOrWhiteSpace(apartamento.PropietarioId))
        {
            propietario = DbContext.Users.FirstOrDefault(u => u.Id == apartamento.PropietarioId);

            if (propietario == null)
            {
                mensaje = $"No se encontró el usuario con Id: {apartamento.PropietarioId}";
            }
        }
        else
        {
            mensaje = "PropietarioId está vacío o null.";
        }

    }

    private void IrAReservas()
    {
        Navigation.NavigateTo("/reservas");
    }

    private async Task CrearReservaAsync()
    {

        mensaje = "Intentando reservar...";
        StateHasChanged();

        if (apartamento == null)
        {
            mensaje = "No se puede reservar: no se encontró el apartamento.";
            StateHasChanged();
            return;
        }

        if (propietario == null)
        {
            Console.WriteLine($"Propietario cargado: {propietario.Nombre} - {propietario.PhoneNumber}");
            mensaje = "No se puede reservar: no se encontró el propietario del apartamento.";
            StateHasChanged();
            return;
        }

        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var usuarioActual = await UserManager.GetUserAsync(authState.User);

        var reserva = new ReservaDtos
        {
            FechaSolicitud = DateTime.Now,
            Estado = "Pendiente",
            NombreApartamento = apartamento.Titulo,
            NombreUsuario = usuarioActual.Nombre,
            Propietario = propietario?.Nombre,
            Contacto = propietario?.PhoneNumber,
            UsuarioId = usuarioActual.Id,
            ApartamentoId = apartamento.Id
        };

        var reservaCreada = ReservaService.Crear(reserva);

        if (reservaCreada != null)
        {
            mensaje = "Reserva creada correctamente.";
            StateHasChanged();
            Navigation.NavigateTo($"/reserva/detalle/{reserva.Id}");
        }
        else
        {
            mensaje = "Error al crear la reserva.";
            StateHasChanged();
        }
    }
}