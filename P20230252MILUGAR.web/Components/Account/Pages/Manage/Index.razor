@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using P20230252MILUGAR.web.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject NavigationManager Navigation


<PageTitle>Perfil</PageTitle>

<div class="form-profile-container">
    <h3>Perfil</h3>
    <StatusMessage />

    <EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" role="alert" />

        <div class="form-floating mb-3">
            <input type="text" value="@Nombre" class="form-control" placeholder="Nombre de usuario" disabled />
            <label for="username">Nombre de usuario</label>
        </div>

        <div class="form-floating mb-3">
            <InputText @bind-Value="Input.PhoneNumber" class="form-control" placeholder="Número de teléfono" />
            <label for="phone-number">Número de teléfono</label>
            <ValidationMessage For="() => Input.PhoneNumber" class="text-danger" />
        </div>

        <button type="submit" class="btn btn-success w-100">Guardar</button>
    </EditForm>
</div>

@code {
    private ApplicationUser user = default!;
    private string? Nombre;
    private string? phoneNumber;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        Nombre = await UserManager.GetUserNameAsync(user);
        phoneNumber = await UserManager.GetPhoneNumberAsync(user);

        Input.PhoneNumber ??= phoneNumber;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.PhoneNumber != phoneNumber)
        {
            var setPhoneResult = await UserManager.SetPhoneNumberAsync(user, Input.PhoneNumber);
            if (!setPhoneResult.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to set phone number.", HttpContext);
                return;
            }
        }

        await SignInManager.RefreshSignInAsync(user);
        Navigation.NavigateTo("/perfil");
    }

    private sealed class InputModel
    {
        [Phone]
        [Display(Name = "Phone number")]
        public string? PhoneNumber { get; set; }
    }
}
